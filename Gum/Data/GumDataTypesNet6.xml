<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GumDataTypesNet6</name>
    </assembly>
    <members>
        <member name="P:Gum.DataTypes.Behaviors.ElementBehaviorReference.ProjectName">
            <summary>
            Currently unused - this will eventually be used to reference behaviors
            from different Gum projects.
            </summary>
        </member>
        <member name="F:Gum.DataTypes.DimensionUnitType.Absolute">
            <summary>
            Width and Height values are measured in absolute pixel values
            </summary>
        </member>
        <member name="F:Gum.DataTypes.DimensionUnitType.PercentageOfParent">
            <summary>
            Width and Height values are measured in percentage of parent, where 100 is 100% of the parent's width
            </summary>
        </member>
        <member name="F:Gum.DataTypes.DimensionUnitType.RelativeToParent">
            <summary>
            Width and Height values are measured in pixels relative to the parent, where a value of 0
            equals the size of the parent. Positive values are larger than the parent. Negative values are
            smaller than the parent.
            </summary>
        </member>
        <member name="F:Gum.DataTypes.DimensionUnitType.PercentageOfSourceFile">
            <summary>
            Width and Height values are measured in percentage of the source file , where 100 is 100% of the source file's width
            or height. Width and Height values consider texture coordinates, so if custom coordinates are used, then
            the Width and Height values are multplied by the visible portion of the source file.
            </summary>
        </member>
        <member name="F:Gum.DataTypes.DimensionUnitType.RelativeToChildren">
            <summary>
            Width and Height values are measured in pixels relative to the necessary size to contain children. A larger
            value adds additional padding.
            </summary>
        </member>
        <member name="F:Gum.DataTypes.DimensionUnitType.PercentageOfOtherDimension">
            <summary>
            The selected dimension is measured in percentage of the other dimension. For example, if WidthUnits 
            is set to PercentageOfOtherDimension and Width is set to 50, then the Width is 50% of the Height.
            Only one of the two dimensions should use this unit type.
            </summary>
        </member>
        <member name="F:Gum.DataTypes.DimensionUnitType.MaintainFileAspectRatio">
            <summary>
            The selected dimension is a percentage of the necessary value for maintaining the aspect ratio of the file.
            For example, if WidthUnits is set to MaintainFileAspectRatio and Width is set to 100, then the
            effective width value is set to match the aspect ratio of the file. This considers texture coordinates.
            </summary>
        </member>
        <member name="F:Gum.DataTypes.DimensionUnitType.Ratio">
            <summary>
            The Width or Height of the parent is distributed among all siblings using Ratio after
            subtracting the Width and Height values of siblings using Absolute values.
            </summary>
        </member>
        <member name="F:Gum.DataTypes.DimensionUnitType.AbsoluteMultipliedByFontScale">
            <summary>
            Width and Height values are measured in absolute pixels multiplied by the device's font scale.
            </summary>
            <remarks>
            Not all platforms support this value. If this value is not supported, absolute pixel values are used
            </remarks>
        </member>
        <member name="F:Gum.DataTypes.DimensionUnitType.ScreenPixel">
            <summary>
            Width and Height values are measured in screen pixels. If the Camera is zoomed 100% then 
            values are the same as Absolute. Zooming the camera affects absolute size.
            </summary>
        </member>
        <member name="M:Gum.DataTypes.DimensionUnitTypeExtensions.GetIsPixelBased(Gum.DataTypes.DimensionUnitType)">
            <summary>
            Returns whether one unit represents one pixel. 
            </summary>
            <param name="unitType">The unit type.</param>
            <returns>Whether one unit represents one pixel.</returns>
        </member>
        <member name="P:Gum.DataTypes.ElementReference.Link">
            <summary>
            The location of the file relative to the project if it differs from the Name. By default
            this will be empty, so the Name will be used to load/save the element. However, if this is not null,
            then this value is used instead to load the referenced element.
            </summary>
        </member>
        <member name="P:Gum.DataTypes.ElementSave.AllStates">
            <summary>
            Returns all states in the element including categorized states. For uncategorized states, see
            the States property.
            </summary>
        </member>
        <member name="M:Gum.DataTypes.ElementSave.GetInstance(System.String)">
            <summary>
            Returns the instance by name owned by this element.
            </summary>
            <remarks>
            This only searches the top-level for instances, but inheritance will result in DefinedByBase being set to true, so
            a true recursive search isn't needed.
            </remarks>
            <param name="name">The case-sensitive name of the instance.</param>
            <returns>The found instance, or null if no matches are found.</returns>
        </member>
        <member name="P:Gum.DataTypes.GumLoadResult.ErrorMessage">
            <summary>
            Error message about why the load may have failed. This does not include errors about missing files - for missing files see the MissingFiles list.
            </summary>
            <remarks>
            Errors include situations like a malformed XML file - errors which tools like Gum cannot recover from. Missing files, while resulting
            in an incomplete load, do not put the project in an unusable state, so we do not consider them errors.
            </remarks>
        </member>
        <member name="T:Gum.DataTypes.GumProjectSave">
            <summary>
            Represents the data stored in a .gumx file. GumProjectSave
            instances can be XML Serialized to a .gumx file.
            </summary>
        </member>
        <member name="P:Gum.DataTypes.GumProjectSave.ParentProjectRoot">
            <summary>
            The folder of the root of the parent project if this Gum project is part of a larger project (like a game project or android app).
            This is a relative path like "../../"
            </summary>
        </member>
        <member name="M:Gum.DataTypes.GumProjectSave.GetScreenSave(System.String)">
            <summary>
             shortcut function to fetch a specific screen from your gum project.
            <code ang="csharp">
            //same as :
            screen.Find(item => item.Name == "name");
            </code>
             
            </summary>
            <param name="screenName"></param>
            <returns></returns>
        </member>
        <member name="M:Gum.DataTypes.GumProjectSave.GetComponentSave(System.String)">
             <summary>
             shortcu function to fetch a specific component from your gum project
            
             <code ang="csharp">
             //same as :
             components.Find(item => item.Name == "name");
             </code>
             </summary>
             <param name="componentName"></param>
             <returns></returns>
        </member>
        <member name="M:Gum.DataTypes.GumProjectSave.GetStandardElementSave(System.String)">
             <summary>
             shortcut function to fetch a specific standard elements from your gum project.
            
             <code ang="csharp">
             //same as :
             standards.Find(item => item.Name == "name");
             </code>
             </summary>
             <param name="standardElementName"></param>
             <returns></returns>
        </member>
        <member name="P:Gum.DataTypes.InstanceSave.ParentContainer">
            <summary>
            The ElementSave which contains this instance.
            </summary>
        </member>
        <member name="M:Gum.DataTypes.Variables.StateSave.GetValue(System.String)">
            <summary>
            Attempts to get the value for the argument variableName, or null if not found.
            </summary>
            <param name="variableName">The qualified variable name</param>
            <returns>The value found, or null</returns>
        </member>
        <member name="P:Gum.DataTypes.Variables.VariableListSave.Type">
            <summary>
             The type of each individual item in the list. For example, this should be "int" rather than a list of int
            </summary>
        </member>
        <member name="T:Gum.DataTypes.Variables.VariableSaveValues">
            <summary>
            Struct representation of VariableSave which can be used in situations where
            heap allocation should not occur
            </summary>
        </member>
        <member name="P:Gum.DataTypes.Variables.VariableSave.SourceObject">
            <summary>
            The name of the object that this variable references. For example if the variable is "MyButton.Text", then the SourceObject is "MyButton"
            </summary>
        </member>
        <member name="P:Gum.DataTypes.Variables.VariableSave.ExposedAsName">
            <summary>
            If a Component contains an instance then the variable
            of that instance is only editable inside that component.
            The user must explicitly expose that variable.  If the variable
            is exposed then this variable is set.
            </summary>
        </member>
        <member name="P:Gum.DataTypes.Variables.VariableSave.SetsValue">
            <summary>
            Determines whether a null value should be set, or whether the variable is
            an ignored value.  If this value is true, then null values will be set on the underlying data.
            </summary>
        </member>
        <member name="M:Gum.DataTypes.Variables.VariableSave.GetRootName">
            <summary>
            Returns the name of the variable on the instance. For example "Rectangle.X" would return "X".
            If this does not have a SourceObect, then the Name is returned.
            </summary>
            <returns>The root name (name on the instance)</returns>
        </member>
        <member name="T:Gum.StateAnimation.SaveClasses.AnimationSave">
            <summary>
            A serializable animation which contains a list of States (keyframes), Animations (sub-animations), and Events (timed named events)
            </summary>
        </member>
        <member name="F:Gum.Converters.GeneralUnitType.PixelsFromSmall">
            <summary>
            Units are measured in pixels. 
            X values are measured relative to the left side.
            Y values are measured relative to the top side.
            </summary>
        </member>
        <member name="F:Gum.Converters.GeneralUnitType.PixelsFromLarge">
            <summary>
            Units are measured in pixels.
            X values are measured relative to the right side.
            Y values are measured relative to the bottom side.
            </summary>
        </member>
        <member name="F:Gum.Converters.GeneralUnitType.PixelsFromMiddle">
            <summary>
            Units are measured in pixels.
            X values are measured relative to the horizontal center.
            Y values are measured relative to the vertical center.
            </summary>
        </member>
        <member name="F:Gum.Converters.GeneralUnitType.Percentage">
            <summary>
            Units are measured in percentage of the parent's dimensions.
            X values are precentage of width, with 0 at the left edge, 100 at the right edge.
            Y values are percentage of height, with 0 at the top edge, 100 at the bottom edge.
            </summary>
        </member>
        <member name="F:Gum.Converters.GeneralUnitType.PercentageOfFile">
            <summary>
            Unit values are measured in percentage of the current object's file.
            X values are a percentage of file width.
            Y values are a percentage of file height.
            </summary>
        </member>
        <member name="F:Gum.Converters.GeneralUnitType.PixelsFromBaseline">
            <summary>
            Pixels relative to the parent's baseline. This only applies for Y values,
            and only if the parent type has baseline values (Text).
            </summary>
        </member>
    </members>
</doc>
